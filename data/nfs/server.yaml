apiVersion: apps/v1
kind: Deployment
metadata:
  name: nfs-server
  namespace: nfs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-server
  template:
    metadata:
      labels:
        app: nfs-server
    spec:
      tolerations:
        - key: "node-role.kubernetes.io/control-plane"
          operator: "Exists"
          effect: "NoSchedule"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: nfs-server
                    operator: In
                    values:
                      - "true"
      containers:
        - name: nfs-server
          image: itsthenetwork/nfs-server-alpine:12
          ports:
            - name: nfs
              containerPort: 2049
            - name: mountd
              containerPort: 20048
            - name: rpcbind
              containerPort: 111
          securityContext:
            privileged: true
          env:
            - name: SHARED_DIRECTORY
              value: /mnt/tank/test-fs
          volumeMounts:
            - name: nfs-data
              mountPath: /mnt/tank/test-fs
      volumes:
        - name: nfs-data
          hostPath:
            path: /mnt/tank/test-fs
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Service
metadata:
  name: nfs-server
  namespace: nfs
spec:
  selector:
    app: nfs-server
  ports:
    - protocol: TCP
      port: 2049
      targetPort: 2049
      name: nfs # Unique name for the NFS port
    - protocol: TCP
      port: 20048
      targetPort: 20048
      name: mountd # Unique name for the mountd port
    - protocol: TCP
      port: 111
      targetPort: 111
      name: rpcbind # Unique name for the rpcbind port
  clusterIP: None # This makes it a headless service
